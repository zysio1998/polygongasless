{"version":3,"sources":["App.js","assets/undraw_art_museum_-8-or4.svg","networks.js","reportWebVitals.js","index.js"],"names":["walletProvider","walletSigner","contract","biconomy","networks","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","selectedAddress","setSelectedAddress","loading","setloading","network","setNetwork","init","a","window","ethereum","isMetaMask","Biconomy","apiKey","debug","console","log","ethers","providers","Web3Provider","getSigner","getAddress","userAddress","onEvent","READY","Contract","myNft","abi","getSignerByAddress","utils","Interface","ERROR","error","message","checkIfWalletIsConnected","handleChainChanged","_chainId","location","reload","request","method","accounts","length","account","switchNetwork","chainId","on","connectWallet","alert","params","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","askContractToMintNft","provider","getEthersProvider","populateTransaction","mintNFT","data","estimateGas","to","from","gasLimit","txParams","signatureType","send","tx","once","transaction","Swal","fire","title","html","transactionHash","width","padding","color","background","backdrop","icon","text","useEffect","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ad34be0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './styles/App.css';\r\nimport coverphot from './assets/undraw_art_museum_-8-or4.svg'\r\nimport { ethers } from \"ethers\"\r\nimport { Biconomy } from \"@biconomy/mexa\";\r\nimport myNft from \"./GaslessTransactions.json\"\r\nimport {networks} from \"./networks\"\r\nimport Swal from 'sweetalert2'\r\n\r\nconst CONTRACT_ADDRESS = \"0x4075998A0d15A8bA0BC5DD054753bB6E49967257\"; //mattic mainnet\r\n//const CONTRACT_ADDRESS = \"0x9CAb6adA8bb3cAac1d3da42454e57Dbd79762eAB\"; //kovan\r\n\r\n\r\nlet ethersProvider, walletProvider, walletSigner\r\nlet contract, contractInterface\r\nlet biconomy\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [selectedAddress, setSelectedAddress] = useState('')\r\n  const [loading, setloading] = useState(false);\r\n  const [network, setNetwork] = useState('')\r\n\r\n  const init = async () => {\r\n    if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {\r\n      // setInitLoading(0)\r\n\r\n      biconomy = new Biconomy(window.ethereum, {\r\n        apiKey: 'H8roWKFJL.afb8c826-9415-45f1-87c4-ae438cd0d422',\r\n        debug: true,\r\n      })\r\n      console.log(biconomy, \"checking\")\r\n\r\n      // two providers one with biconomy andd other for the wallet signing the transaction\r\n      ethersProvider = new ethers.providers.Web3Provider(biconomy)\r\n      walletProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n      walletSigner = walletProvider.getSigner()\r\n\r\n      let userAddress = await walletSigner.getAddress()\r\n      setSelectedAddress(userAddress)\r\n\r\n      // init dApp stuff like contracts and interface\r\n      biconomy\r\n        .onEvent(biconomy.READY, async () => {\r\n          contract = new ethers.Contract(\r\n            CONTRACT_ADDRESS,\r\n            myNft.abi,\r\n            biconomy.getSignerByAddress(userAddress)\r\n          )\r\n\r\n          contractInterface = new ethers.utils.Interface(myNft.abi)\r\n          setloading(false)\r\n          // setInitLoading(1)\r\n        })\r\n        .onEvent(biconomy.ERROR, (error, message) => {\r\n          console.log(message)\r\n          console.log(error)\r\n        })\r\n    } else {\r\n      console.log('Metamask not installed')\r\n    }\r\n  }\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account)\r\n      switchNetwork()\r\n     \r\n      // setupEventListener()\r\n    } else {\r\n      console.log(\"No authorized account found\")\r\n    }\r\n\r\n    // This is the new part, we check the user's network chain ID\r\n    const chainId = await ethereum.request({ method: 'eth_chainId' })\r\n    setNetwork(networks[chainId])\r\n\r\n    ethereum.on('chainChanged', handleChainChanged)\r\n\r\n    function handleChainChanged(_chainId) {\r\n      window.location.reload()\r\n    }\r\n  }\r\n\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      switchNetwork()\r\n      // setupEventListener()\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const switchNetwork = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        // Try to switch to the  testnet\r\n        await window.ethereum.request({\r\n          method: 'wallet_switchEthereumChain',\r\n          params: [{ chainId: '0x89' }], // Check networks.js for hexadecimal network ids\r\n        })\r\n      } catch (error) {\r\n        // This error code means that the chain we want has not been added to MetaMask\r\n        // In this case we ask the user to add it to their MetaMask\r\n        if (error.code === 4902) {\r\n          try {\r\n            await window.ethereum.request({\r\n              method: 'wallet_addEthereumChain',\r\n              params: [\r\n                {\r\n                  chainId: '0x89',\r\n                  chainName: 'Polygon Mainnet',\r\n                  rpcUrls: [\r\n                    'https://lrd7pqot5gbc.usemoralis.com:2053/server',\r\n                  ],\r\n                  nativeCurrency: {\r\n                    name: 'MATIC',\r\n                    symbol: 'MATIC',\r\n                    decimals: 18,\r\n                  },\r\n                  blockExplorerUrls: ['https://polygonscan.com/'],\r\n                },\r\n              ],\r\n            })\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        }\r\n        console.log(error)\r\n      }\r\n    } else {\r\n      // If window.ethereum is not found then MetaMask is not installed\r\n      alert(\r\n        'MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html'\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  const askContractToMintNft = async () => {\r\n    try {\r\n      if(currentAccount !== ''){\r\n      setloading(true)\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        let userAddress = selectedAddress\r\n \r\n          \r\n          \r\n        console.log(biconomy)\r\n          let provider = biconomy.getEthersProvider();\r\n          let { data } = await contract.populateTransaction.mintNFT();\r\n          let gasLimit = await provider.estimateGas({\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            data: data\r\n          });\r\n          console.log(\"Gas limit : \", gasLimit);\r\n\r\n          let txParams = {\r\n            data: data,\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            gasLimit: 10000000,\r\n            signatureType: \"EIP712_SIGN\"\r\n          };\r\n          console.log(txParams)\r\n\r\n          let tx\r\n          try {\r\n            tx = await provider.send(\"eth_sendTransaction\", [txParams])\r\n          }\r\n          catch (err) {\r\n            console.log(\"handle errors like signature denied here\");\r\n            console.log(err);\r\n          }\r\n          console.log(\"Transaction hash : \", tx);\r\n          provider.once(tx, (transaction) => {\r\n            console.log(transaction, \"emited\");\r\n            setloading(false)\r\n            Swal.fire({\r\n              title: 'Minting successfull',\r\n              html:\r\n                'Hey there! we are minted successfully completed.' +\r\n                `<a href=' https://polygonscan.com/tx/${transaction.transactionHash}'>https://polygonscan.com/</a> ` +\r\n                '',\r\n              width: 600,\r\n              padding: '3em',\r\n              color: '#716add',\r\n              background: '#fff url(/images/trees.png)',\r\n              backdrop: `\r\n                rgba(0,0,123,0.4)\r\n                url(\"/images/nyan-cat.gif\")\r\n                left top\r\n                no-repeat\r\n              `\r\n            })\r\n          });\r\n\r\n          console.log(\"Going to pop wallet now to pay gas...\")\r\n          console.log(\"Mining...please wait.\")\r\n          \r\n       \r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    }else{\r\n      Swal.fire(\r\n        'Connect wallet',\r\n        'Befor mint connect with wallet',\r\n        'question'\r\n      )\r\n    }\r\n      \r\n    } catch (error) {\r\n      setloading(false)\r\n      if(error.data.message == \"execution reverted: Invalid Merkle Proof.\"){\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Minting Failed',\r\n        text: 'You are not in whitelist ',\r\n       \r\n      })\r\n      \r\n    }else if(error.data.message == \"execution reverted: Address already claimed\"){\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Minting Failed',\r\n        text: 'You are already claimed',\r\n       \r\n      })\r\n    }else{\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Minting Failed',\r\n        text: error.data.message,\r\n       \r\n      })\r\n\r\n    }\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    if(currentAccount !== ''){\r\n      setloading(true)\r\n    }\r\n\r\n    if (currentAccount !== '' && network === 'Polygon Mainnet') {\r\n      console.log('init')\r\n      init()\r\n    }\r\n  }, [currentAccount, network])\r\n\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        loading ?\r\n          <div className=\"loading\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n          :\r\n          \"\"}\r\n      <div className={loading ? \"container disabledbutton\" : \"container\"}>\r\n        <div className=\"nav header-container\">\r\n          <div className=\"connect\">\r\n            {currentAccount === \"\" ? (\r\n              renderNotConnectedContainer()\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row body\">\r\n            <div className=\"col-md-6 tesboddy ff\">\r\n              <p className=\"header gradient-text\">Cool Mint by Exhale</p>\r\n              <p className=\"sub-text\">\r\n                Mint Below\r\n              </p>\r\n              <div className=\" mint_div \">\r\n                <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\r\n                  Mint NFT\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6 ff\">\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","export default __webpack_public_path__ + \"static/media/undraw_art_museum_-8-or4.f8d84fd1.svg\";","const networks = {\r\n    '0x1': 'Mainnet',\r\n    '0x3': 'Ropsten',\r\n    '0x2a': 'Kovan',\r\n    '0x4': 'Rinkeby',\r\n    '0x5': 'Goerli',\r\n    '0x61': 'BSC Testnet',\r\n    '0x38': 'BSC Mainnet',\r\n    '0x89': 'Polygon Mainnet',\r\n    '0x13881': 'Polygon Mumbai Testnet',\r\n    '0xa86a': 'AVAX Mainnet',\r\n  }\r\n  \r\n  export { networks }","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}